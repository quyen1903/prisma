generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// shop model with uuid as primary key
model Shop {
  id   String    @id  @unique @default(uuid())
  name      String  @map("shop_name")
  email     String  @map("shop_email")  @unique()
  password  String  @map("shop_password")
  salt      String  @map("shop_salt")
  roles     String  @map("shop_role")
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @updatedAt

  keyToken  KeyToken? // Optional relation to KeyToken
  discount Discount[]
  products      Product[]
  clothings     Clothing[]
  electronic   Electronic[]
  furnitures    Furniture[]

  @@map("shops")
}

// keyToken model with reference to shop uuid
model KeyToken {
  id   String    @id  @unique @default(uuid())

  //1-1 relation with shop
  shop  Shop @relation(fields: [shopId],references: [id])
  shopId            String  @unique @map("key_shop")

  // user  User  @relation(fields: [userId], references: [id])
  // userId  String  @unique @map("key_user")

  publicKey         String
  refreshTokensUsed String[] @default([])
  refreshToken      String
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @updatedAt

  // Define foreign key relationship to Shop model
  @@map("key_tokens")
}

model APIkey {
  id   String    @id  @unique @default(uuid())
  key String  
  status Boolean
  permission String[]

  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @updatedAt

  @@map("api_keys")
}

model Product {
  id   String    @id  @unique @default(uuid())
  productName        String             @map("product_name")
  productThumb       String             @map("product_thumb")
  productDescription String?            @map("product_description")
  productSlug        String?            @map("product_slug")
  productPrice       Float              @map("product_price")
  productQuantity    Int                @map("product_quantity")
  productType        ProductType        @map("product_type")

  //one to many relation with shop
  productShop  Shop   @relation(fields: [productShopId], references: [id])
  productShopId String  @map("product_shop")

  productAttributes  Json?              @map("product_attributes")
  productRatingsAverage Float           @default(4.5) @map("product_ratingsAverage")
  productVariation   String[]           @default([]) @map("product_variation")
  isDraft            Boolean            @default(true)
  isPublished        Boolean            @default(false)
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @updatedAt

  @@index([productName, productDescription]) // Create a text index for search
  @@map("products")
}

// Clothing Model
model Clothing {
  id   String    @id  @unique @default(uuid())

  brand        String
  size         String
  material     String

  //one to many relation with shop
  productShop  Shop   @relation(fields: [productShopId], references: [id])
  productShopId String  @map("product_shop")

  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @updatedAt

  @@map("clothes")
}

// Electronics Model
model Electronic {
  id   String    @id  @unique @default(uuid())
  manufacturer  String
  model        String
  color        String
  
  //one to many relation with shop
  productShop  Shop   @relation(fields: [productShopId], references: [id])
  productShopId String  @map("product_shop")

  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @updatedAt

  @@map("electronics")
}

// Furniture Model
model Furniture {
  id   String    @id  @unique @default(uuid())

  brand        String
  size         String
  material     String

  //one to many relation with shop
  productShop  Shop   @relation(fields: [productShopId], references: [id])
  productShopId String  @map("product_shop")

  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @updatedAt

  @@map("furnitures")
}

model Discount {
  id   String    @id  @unique @default(uuid())

  discountName String @map("discount_name")
  discountDescription String @map("discount_description")
  discountType String @map("discount_type") @default("fixed_amount")
  discountValue Float @map("discount_value")
  discountCode String @unique @map("discount_code")
  discountStartDates DateTime @map("discount_start_dates")
  discountEndDates DateTime @map("discount_end_dates")
  discountMaxUses Int @map("discount_max_uses")
  discountUsesCount Int @map("discount_uses_count")
  discountUsersUsed String[] @default([]) @map("discount_users_used")
  discountMaxUsesPerUser Int @map("discount_max_uses_per_user")
  discountMinOrderValue Float @map("discount_min_order_value")
  //one to many with shop
  discountShop Shop @relation(fields: [discountShopId], references: [id])
  discountShopId String @map("discount_shop")

  discountIsActive Boolean @default(true) @map("discount_is_active") 
  discountAppliesTo DiscountAppliesTo @map("discount_applies_to")
  discountProductIds String[] @default([]) @map("discount_product_ids")
  
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @updatedAt

  @@map("discounts")
}

model Cart {
  id   String    @id  @unique @default(uuid())

  state             CartState @default(ACTIVE)  @map("cart_state")
  countProduct      Int        @default(0) @map("cart_count_product")
  userId            String        @unique  @map("cart_userId")
  cartProducts    CartProduct[]

  createdOn         DateTime   @default(now()) @map("createdOn")
  modifiedOn        DateTime   @updatedAt @map("modifiedOn")

  @@map("carts")
}

model CartProduct {
  id   String    @id  @unique @default(uuid())

  productId String  @unique @map("cart_product_productId")
  shopId    String  @map("cart_product_shopId")
  quantity  Int @map("cart_product_quantity")
  name      String  @map("cart_product_name")
  price     Float @map("cart_product_price")

  cart  Cart  @relation(fields: [cartId], references: [id])
  cartId    String @map("cart_product_cartId")

  createdOn         DateTime   @default(now()) @map("createdOn")
  modifiedOn        DateTime   @updatedAt @map("modifiedOn")

  @@map("cart_products")
}

model User {
  id   String    @id  @unique @default(uuid())

  name      String  @map("user_name")
  email     String  @map("user_email")  @unique()
  password  String  @map("user_password")
  salt      String  @map("user_salt")
  phone String  @map("user_phone")
  sex String  @map("user_sex")
  avatar  String  @map("user_avatar")
  dateOfBirth DateTime  @map("user_date_of_birth")
  status  Status  @map("user_status")

  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @updatedAt

  // keytoken  KeyToken?
  @@map("users")
}


enum CartState {
  ACTIVE
  COMPLETE
  FAIL
  PENDING
}

enum RoleShop {
  SHOP 
  WRITER 
  EDITOR 
  ADMIN 
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}

enum ProductType {
  Clothing
  Electronic
  Furniture
}

enum DiscountAppliesTo {
  all
  specific
}